#!/usr/bin/env bash
# gex - Git eXtended main dispatcher
# Early scaffold version: 0.1.0
#
# Responsibilities:
#  - Parse global options (before the subcommand)
#  - Discover and dispatch to internal commands (./commands/<name>)
#  - Fallback to external plugins named `gex-<name>` on PATH
#  - Provide helpful top-level usage and command listing
#
# Conventions for subcommands:
#  - Each command is an executable file in ./commands
#  - It may source shared libs from ./lib (e.g. core.sh)
#  - It should implement its own --help
#
# Environment flags:
#  - NO_COLOR=1      Disable colored output globally
#  - GEX_DEBUG=1     Enable debug logging (same as --debug)
#  - GEX_TRACE=1     Trace execution (set -x)
#
# Exit codes:
#  0  success
#  1  general error
#  2  usage error / invalid option
# 127 unknown command

set -euo pipefail

[ "${GEX_TRACE:-0}" = "1" ] && set -x

GEX_VERSION="1.0.0"

# Resolve root directory (directory containing this script)
GEX_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Directories
GEX_COMMAND_DIR="$GEX_ROOT/commands"
GEX_LIB_DIR="$GEX_ROOT/lib"
GEX_CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/gex"

mkdir -p "$GEX_CONFIG_DIR" || true

# --- Color / formatting helpers (lightweight; refined versions in lib/color.sh if needed) ---
if [ -t 1 ] && [ -z "${NO_COLOR:-}" ]; then
  _CLR_RED=$'\033[31m'
  _CLR_GRN=$'\033[32m'
  _CLR_YEL=$'\033[33m'
  _CLR_BLU=$'\033[34m'
  _CLR_BOLD=$'\033[1m'
  _CLR_DIM=$'\033[2m'
  _CLR_RST=$'\033[0m'
else
  _CLR_RED=""; _CLR_GRN=""; _CLR_YEL=""; _CLR_BLU=""; _CLR_BOLD=""; _CLR_DIM=""; _CLR_RST=""
fi

log_info()  { echo "${_CLR_GRN}INFO${_CLR_RST}: $*" >&2; }
log_warn()  { echo "${_CLR_YEL}WARN${_CLR_RST}: $*" >&2; }
log_error() { echo "${_CLR_RED}ERROR${_CLR_RST}: $*" >&2; }
log_debug() {
  if [ "${GEX_DEBUG:-0}" = "1" ]; then
    echo "${_CLR_BLU}DEBUG${_CLR_RST}: $*" >&2
  fi
}

die() { log_error "$*"; exit 1; }

# Attempt to source core libs if present (non-fatal if missing during early scaffold)
for lib in core.sh color.sh git.sh; do
  if [ -f "$GEX_LIB_DIR/$lib" ]; then
    # shellcheck disable=SC1090
    source "$GEX_LIB_DIR/$lib" || true
  fi
done

print_version() {
  echo "gex $GEX_VERSION"
}

print_usage() {
  cat <<EOF
${_CLR_BOLD}gex${_CLR_RST} - Git eXtended tooling (version $GEX_VERSION)

A powerful Git workflow automation tool with safety features and smart defaults.

Usage:
  gex [global-options] <command> [args]

Global Options:
  --help, -h        Show this help
  --version, -V     Show version
  --debug           Enable debug logging (also GEX_DEBUG=1)
  --no-color        Disable color output (also NO_COLOR=1)
  --list            List available internal and external commands

Core Commands:
$(list_internal_commands | sed "s/^/  /")

Essential Workflows:
  gex start feature my-feature          # Create feature branch with smart naming
  gex publish                          # Push branch with safety checks
  gex snip                             # Cherry-pick to avoid rebase conflicts
  gex wip "checkpoint"                 # Quick work-in-progress commit
  gex graph --interactive              # Visual commit history explorer

Command Details:
  ${_CLR_BOLD}start${_CLR_RST}    - Create branches with naming conventions and base branch detection
  ${_CLR_BOLD}publish${_CLR_RST}  - Push branches safely with upstream tracking and force-push protection
  ${_CLR_BOLD}snip${_CLR_RST}     - Cherry-pick commits onto latest base branch (avoid merge conflicts)
  ${_CLR_BOLD}wip${_CLR_RST}      - Quick checkpointing with easy rollback (gex wip --undo)
  ${_CLR_BOLD}graph${_CLR_RST}    - Powerful commit visualization with filtering and highlighting
  ${_CLR_BOLD}config${_CLR_RST}   - Manage settings and workflow presets

Configuration:
  Global: ~/.config/gex/config
  Repo:   .gexrc (in repository root)

  # Set custom branch types
  gex config set branch_types "epic,story,task,bugfix"

  # Use workflow presets
  gex config use features    # feature/bugfix/hotfix workflow
  gex config use patches     # features/patches workflow

Environment Variables:
  NO_COLOR=1   Disable colors
  GEX_DEBUG=1  Debug logs
  GEX_TRACE=1  Shell trace (set -x)

Get Started:
  gex start feature my-awesome-feature
  # ... make changes ...
  gex publish

Run 'gex <command> --help' for detailed command options and examples.

Project root: $GEX_ROOT
Config dir:   $GEX_CONFIG_DIR

For comprehensive documentation: https://github.com/dmoggles/gex
EOF
}

list_internal_commands() {
  if [ -d "$GEX_COMMAND_DIR" ]; then
    # List regular files that are executable or readable (allow user to chmod later)
    find "$GEX_COMMAND_DIR" -maxdepth 1 -type f -exec basename {} \; 2>/dev/null | sort
  fi
}

list_external_plugins() {
  # Search PATH for executables named gex-*
  local IFS=':'
  local seen=""
  for p in $PATH; do
    [ -d "$p" ] || continue
    while IFS= read -r file; do
      local name
      name="$(basename "$file")"
      # Ensure pattern match and executability
      if [[ "$name" == gex-* ]] && [ -x "$file" ]; then
        local short="${name#gex-}"
        # Avoid duplicates (first one in PATH wins)
        if [[ ":$seen:" != *":$short:"* ]]; then
          echo "$short"
          seen="${seen}:$short"
        fi
      fi
    done < <(find "$p" -maxdepth 1 -type f -name 'gex-*' 2>/dev/null || true)
  done | sort
}

list_all_commands() {
  list_internal_commands
  list_external_plugins
}

# Parse global options (only those before the command).
GLOBAL_ARGS=()
POSITIONAL=()
while [ $# -gt 0 ]; do
  case "$1" in
    --help|-h) print_usage; exit 0;;
    --version|-V) print_version; exit 0;;
    --debug) export GEX_DEBUG=1; shift;;
    --no-color) export NO_COLOR=1; shift;;
    --list) echo "Internal:"; list_internal_commands | sed 's/^/  /'; echo "External:"; list_external_plugins | sed 's/^/  /'; exit 0;;
    --) shift; break;;
    -*) log_error "Unknown global option: $1"; echo; print_usage; exit 2;;
    *) break;;
  esac
done

if [ $# -lt 1 ]; then
  print_usage
  exit 0
fi

subcommand="$1"; shift || true

log_debug "Dispatching subcommand '$subcommand' with args: $*"

# Dispatch order:
#  1. Internal command: ./commands/<name>
#  2. External plugin:  executable in PATH named gex-<name>
#  3. Suggest similar internal commands if not found

dispatch_internal() {
  local cmd_path="$GEX_COMMAND_DIR/$subcommand"
  if [ -f "$cmd_path" ]; then
    if [ ! -x "$cmd_path" ]; then
      log_debug "Making internal command executable: $cmd_path"
      # Attempt to set exec bit (non-fatal if fails)
      chmod +x "$cmd_path" 2>/dev/null || true
    fi
    if [ -x "$cmd_path" ]; then
      exec "$cmd_path" "$@"
    fi
  fi
  return 1
}

dispatch_external() {
  local plugin="gex-$subcommand"
  if command -v "$plugin" >/dev/null 2>&1; then
    exec "$plugin" "$@"
  fi
  return 1
}

suggest_similar() {
  local target="$1"
  local candidates
  candidates="$(list_all_commands || true)"
  [ -z "$candidates" ] && return 0
  # Simple Levenshtein approximation using awk (or fallback to prefix)
  local suggestion=""
  local best=999
  while IFS= read -r cand; do
    # Distance function approximate (difference in length + mismatched chars up to shorter length)
    local len_t=${#target}
    local len_c=${#cand}
    local min=$(( len_t < len_c ? len_t : len_c ))
    local mismatch=0
    for ((i=0;i<min;i++)); do
      if [ "${target:i:1}" != "${cand:i:1}" ]; then
        mismatch=$((mismatch+1))
      fi
    done
    local diff=$(( mismatch + (len_t - min) + (len_c - min) ))
    if [ $diff -lt $best ]; then
      best=$diff
      suggestion="$cand"
    fi
  done <<<"$candidates"
  if [ -n "$suggestion" ] && [ $best -le 4 ]; then
    echo "Did you mean: ${_CLR_BOLD}$suggestion${_CLR_RST} ?" >&2
  fi
}

if dispatch_internal "$@"; then
  die "Internal dispatch unexpectedly returned"
fi

if dispatch_external "$@"; then
  die "External dispatch unexpectedly returned"
fi

log_error "Unknown command: $subcommand"
suggest_similar "$subcommand"
echo >&2 "Run 'gex --list' to see available commands or 'gex --help' for usage."
exit 127
